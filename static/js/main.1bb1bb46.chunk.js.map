{"version":3,"sources":["logo.svg","componentes/Inicio.js","componentes/Buscador.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Inicio","className","id","src","Logo","alt","title","style","width","margin","type","name","placeholder","to","Buscador","props","Container","fluid","Row","Col","md","categorias","map","categoria","key","App","state","axios","get","then","res","data","setState","basename","exact","path","render","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,0SC8B5BC,G,MAzBA,WACb,OACE,4BAAQC,UAAU,cAChB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,yBAAKC,GAAG,eACN,yBAAKD,UAAU,gBACb,yBAAKE,IAAKC,IAAMF,GAAG,OAAOG,IAAI,qDAAqDC,MAAM,qDAAqDC,MAAO,CAACC,MAAO,QAAQC,OAAO,UAC5K,kDACA,kFAEF,8BACE,2BAAOC,KAAK,OAAOR,GAAG,QAAQD,UAAU,gBAAgBU,KAAK,QAAQC,YAAY,YACjF,2BAAOF,KAAK,OAAOR,GAAG,WAAWD,UAAU,eAAeU,KAAK,QAAQC,YAAY,kBACnF,kBAAC,IAAD,CAAMC,GAAG,YAAYZ,UAAU,iBAA/B,aAEF,yBAAKC,GAAG,qB,wBCaLY,G,MA1BE,SAACC,GAChB,OACE,yBAAKd,UAAU,YACb,kBAACe,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAInB,UAAU,eACrB,kDACA,iFACA,+BAGJ,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,wBAAInB,UAAU,cACXc,EAAMM,WAAWC,KAAI,SAACC,EAAWC,GAAZ,OACpB,wBAAIA,IAAKA,GAAK,kBAAC,IAAD,CAAMX,GAAG,KAAKU,SAIlC,kBAACJ,EAAA,EAAD,CAAKC,GAAI,SCoBJK,G,iNAtCbC,MAAQ,CACNL,WAAY,I,mFAGM,IAAD,OACjBM,IAAMC,IAAN,8CACGC,MAAK,SAAAC,GACJ,IAAMT,EAAaS,EAAIC,KACvB,EAAKC,SAAS,CAAEX,oB,+BAIZ,IAAD,OACP,OACE,kBAAC,IAAD,CAAYY,SAAS,KACjB,6BACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAACrB,GAAD,OAAW,kBAAC,EAAWA,MAGjC,kBAAC,IAAD,CACEmB,OAAK,EACLC,KAAK,YACLC,OAAQ,SAACrB,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CACjBM,WAAY,EAAKK,MAAML,wB,GA7BzBgB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASP,OACT,kBAAC,IAAD,KACE,kBAAC,EAAD,OACgBQ,SAASC,eAAe,SDsHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.1bb1bb46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c42aeac8.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Logo from '../logo.svg';\nimport './Inicio.css';\n\nconst Inicio = () => {\n  return (\n    <header className=\"App-header\">\n      <div className=\"inicio\">\n        <div className=\"wrapper fadeInDown\">\n          <div id=\"formContent\">\n            <div className=\"fadeIn first\">\n              <img src={Logo} id=\"icon\" alt=\"Instituto Mexicano del Cemento y del Concreto A.C.\" title=\"Instituto Mexicano del Cemento y del Concreto A.C.\" style={{width: '200px',margin:'15px'}} />\n              <h3>BIBLIOTECA DIGITAL</h3>\n              <p>Instituto Mexicano del Cemento y del Concreto A.C.</p>\n            </div>\n            <form>\n              <input type=\"text\" id=\"login\" className=\"fadeIn second\" name=\"login\" placeholder=\"Usuario\"/>\n              <input type=\"text\" id=\"password\" className=\"fadeIn third\" name=\"login\" placeholder=\"ContraseÃ±a\"/>\n              <Link to=\"/buscador\" className=\"fadeIn fourth\">INGRESAR</Link>\n            </form>\n            <div id=\"formFooter\">\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n \nexport default Inicio;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './Buscador.css';\n\nconst Buscador = (props) => {\n  return (  \n    <div className=\"Buscador\">\n      <Container fluid={true}>\n        <Row>\n          <Col md={12} className=\"text-center\">\n            <h3>BIBLIOTECA DIGITAL</h3>\n            <p>Instituto Mexicano del Cemento y del Concreto A.C.</p>\n            <hr/>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={3}>\n            <ul className=\"categorias\">\n              {props.categorias.map((categoria, key) => (\n                <li key={key}><Link to=\"/\">{categoria}</Link></li>\n              ))}\n            </ul>\n          </Col>\n          <Col md={9}></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n \nexport default Buscador;","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport axios from 'axios';\nimport Inicio from './componentes/Inicio';\nimport Buscador from './componentes/Buscador';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    categorias: []\n  }\n\n  componentDidMount(){\n    axios.get(`http://imcyc.com/biblioteca/categorias.php`)\n      .then(res => {\n        const categorias = res.data;\n        this.setState({ categorias });\n      })\n  }\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n          <div>\n              <Switch>\n                <Route \n                  exact \n                  path=\"/\" \n                  render={(props) => <Inicio {...props} \n                  />}\n                />\n                <Route \n                  exact \n                  path=\"/buscador\" \n                  render={(props) => <Buscador {...props} \n                    categorias={this.state.categorias}\n                    />}\n                />\n              </Switch>\n          </div>\n      </HashRouter>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter>\n  <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}